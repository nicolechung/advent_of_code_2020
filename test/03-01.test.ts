import {
  createMap,
  getHeight,
  getWidth,
  moveAndCount,
  answer,
} from '../src/03-01';

describe('Day 3 tests', () => {
  it('can create a two dimensional  of the inputs', () => {
    const map = `..##.......
        #...#...#..
        .#....#..#.
        ..#.#...#.#
        .#...##..#.
        ..#.##.....
        .#.#.#....#
        .#........#
        #.##...#...
        #...##....#
        .#..#...#.#`;
    expect(createMap(map)).toEqual([
      ['.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.'],
      ['#', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.'],
      ['.', '#', '.', '.', '.', '.', '#', '.', '.', '#', '.'],
      ['.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#'],
      ['.', '#', '.', '.', '.', '#', '#', '.', '.', '#', '.'],
      ['.', '.', '#', '.', '#', '#', '.', '.', '.', '.', '.'],
      ['.', '#', '.', '#', '.', '#', '.', '.', '.', '.', '#'],
      ['.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#'],
      ['#', '.', '#', '#', '.', '.', '.', '#', '.', '.', '.'],
      ['#', '.', '.', '.', '#', '#', '.', '.', '.', '.', '#'],
      ['.', '#', '.', '.', '#', '.', '.', '.', '#', '.', '#'],
    ]);
  });

  it('can return the height of the map', () => {
    const map = [
      ['.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.'],
      ['#', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.'],
      ['.', '#', '.', '.', '.', '.', '#', '.', '.', '#', '.'],
      ['.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#'],
      ['.', '#', '.', '.', '.', '#', '#', '.', '.', '#', '.'],
      ['.', '.', '#', '.', '#', '#', '.', '.', '.', '.', '.'],
      ['.', '#', '.', '#', '.', '#', '.', '.', '.', '.', '#'],
      ['.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#'],
      ['#', '.', '#', '#', '.', '.', '.', '#', '.', '.', '.'],
      ['#', '.', '.', '.', '#', '#', '.', '.', '.', '.', '#'],
      ['.', '#', '.', '.', '#', '.', '.', '.', '#', '.', '#'],
    ];
    expect(getHeight(map)).toEqual(11);
  });
  it('can return the width of the map', () => {
    // expects the width of all rows to be the same
    const map = [
      ['.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.'],
      ['#', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.'],
      ['.', '#', '.', '.', '.', '.', '#', '.', '.', '#', '.'],
      ['.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#'],
      ['.', '#', '.', '.', '.', '#', '#', '.', '.', '#', '.'],
      ['.', '.', '#', '.', '#', '#', '.', '.', '.', '.', '.'],
      ['.', '#', '.', '#', '.', '#', '.', '.', '.', '.', '#'],
      ['.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#'],
      ['#', '.', '#', '#', '.', '.', '.', '#', '.', '.', '.'],
      ['#', '.', '.', '.', '#', '#', '.', '.', '.', '.', '#'],
      ['.', '#', '.', '.', '#', '.', '.', '.', '#', '.', '#'],
    ];
    expect(getWidth(map)).toEqual(11);
  });

  it('can move and count trees', () => {
    const map = [
      ['.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.'],
      ['#', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.'],
      ['.', '#', '.', '.', '.', '.', '#', '.', '.', '#', '.'],
      ['.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#'],
      ['.', '#', '.', '.', '.', '#', '#', '.', '.', '#', '.'],
      ['.', '.', '#', '.', '#', '#', '.', '.', '.', '.', '.'],
      ['.', '#', '.', '#', '.', '#', '.', '.', '.', '.', '#'],
      ['.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#'],
      ['#', '.', '#', '#', '.', '.', '.', '#', '.', '.', '.'],
      ['#', '.', '.', '.', '#', '#', '.', '.', '.', '.', '#'],
      ['.', '#', '.', '.', '#', '.', '.', '.', '#', '.', '#'],
    ];
    expect(moveAndCount(map)).toEqual(7);
  });
  it('returns the answer', () => {
    expect(answer).toMatchInlineSnapshot(`159`);
  });
});
